package binary;/**位运算的演示*/public class OperDemo {    public static void main(String[] args) {        /*        &（与）的练习:---有0则0        int n = 0x614f7bbb;        int m = 0xff; //8 位掩码        int k = n&m;        System.out.println(Integer.toBinaryString(k));        */        /*        |:或运算-----见1则1        int n = 0xb9;        int m = 0xbd00;        int k = n|m;//将n与m错位合并        System.out.println(Integer.toBinaryString(n));        System.out.println(Integer.toBinaryString(m));        System.out.println(Integer.toBinaryString(k));        */        /*        >>>:右位移运算        int n = 0x679f1d98;        int m=n>>>1;//右移1位        int k=n>>>2;//右移2位        int g=n>>>3;//右移3位        System.out.println(Integer.toBinaryString(n));        System.out.println(Integer.toBinaryString(m));        System.out.println(Integer.toBinaryString(k));        System.out.println(Integer.toBinaryString(g));        */        /*        <<:左位移运算        int n = 0x5e8e0dee;        int m = n<<1;        int k = n<<2;        System.out.println(Integer . toBinaryString(n));        System.out.println(Integer. toBinaryString(m));        System.out.println(Integer. toBinaryString(k));        */        //移位在数学中的意义:        int n=5;        System.out.println(n<<1); //10----效率高        System.out.println(n<<2); //20        System.out.println(n<<3); //40        System.out.println(n<<4); //80    }}