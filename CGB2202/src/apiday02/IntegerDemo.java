package apiday02;public class IntegerDemo {    public static void main(String[] args) {        //演示包装类的实际操作：        //1）可以通过包装类来得到基本类型的取值范围        int max = Integer.MAX_VALUE;//获取int的最大值        int min = Integer.MIN_VALUE;//获取int的最小值        System.out.println("最大值为："+max);        System.out.println("最小值为："+min);        long lMax = Long.MAX_VALUE;//获取long的最大值        long lMin = Long.MIN_VALUE;//获取long的最大值        System.out.println("最大值为："+lMax);        System.out.println("最大值为："+lMin);        //2)包装类可以将字符串转换为对应的基本类型        // 前提是该字符串正确表达了基本类型的值        // 若不能正确表达，则发生NumberFormatException数字转换异常        String str = "123";        int num = Integer.parseInt(str);//将字符串str转换为int类型        System.out.println(num);//123        str="123.456";        double dou = Double.parseDouble(str);//将字符串str转换为double类型        System.out.println(dou);//123.456        /*        int的包装类：Integer char的包装类：Character        其余6中基本类型的包装类，就是首字母大写了        //触发了自动装箱特性        //下面代码会被编译为: Integer i1 = Integer. value0f(5);        Integer i1 = 5;        //触发了自动拆箱特性        //下面代码会被编译为: int ii = i1. intValue();        int ii = i1;        */    }}